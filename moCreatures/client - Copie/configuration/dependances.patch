diff -r -U 3 minecraft\net\minecraft\src\Setting.java minecraft_patched\net\minecraft\src\Setting.java
--- minecraft\net\minecraft\src\Setting.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\Setting.java	Fri Apr 01 00:00:00 2011
@@ -7,4 +7,4 @@
 import java.util.HashMap;
 
-public abstract class Setting extends Widget
+public abstract class Setting<T> extends Widget
 {
@@ -36,19 +36,19 @@
     }
 
-    public abstract void set(Object obj, String s);
+    public abstract void set(T obj, String s);
 
-    public void set(Object obj)
+    public void set(T obj)
     {
         set(obj, ModSettings.currentContext);
     }
 
-    public abstract Object get(String s);
+    public abstract T get(String s);
 
-    public Object get()
+    public T get()
     {
         return get(ModSettings.currentContext);
     }
 
-    public HashMap values;
+    public HashMap<String, T> values;
-    public Object defvalue;
+    public T defvalue;
     public String backendname;
diff -r -U 3 minecraft\net\minecraft\src\SettingBoolean.java minecraft_patched\net\minecraft\src\SettingBoolean.java
--- minecraft\net\minecraft\src\SettingBoolean.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingBoolean.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingBoolean extends Setting
+public class SettingBoolean extends Setting<Boolean>
 {
@@ -63,6 +63,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((Boolean)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\SettingFloat.java minecraft_patched\net\minecraft\src\SettingFloat.java
--- minecraft\net\minecraft\src\SettingFloat.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingFloat.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingFloat extends Setting
+public class SettingFloat extends Setting<Float>
 {
@@ -88,6 +88,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((Float)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\SettingInt.java minecraft_patched\net\minecraft\src\SettingInt.java
--- minecraft\net\minecraft\src\SettingInt.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingInt.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingInt extends Setting
+public class SettingInt extends Setting<Integer>
 {
@@ -90,6 +90,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((Integer)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\SettingKey.java minecraft_patched\net\minecraft\src\SettingKey.java
--- minecraft\net\minecraft\src\SettingKey.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingKey.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingKey extends Setting
+public class SettingKey extends Setting<Integer>
 {
@@ -96,6 +96,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((Integer)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\SettingMulti.java minecraft_patched\net\minecraft\src\SettingMulti.java
--- minecraft\net\minecraft\src\SettingMulti.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingMulti.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingMulti extends Setting
+public class SettingMulti extends Setting<Integer>
 {
@@ -131,6 +131,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((Integer)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\SettingText.java minecraft_patched\net\minecraft\src\SettingText.java
--- minecraft\net\minecraft\src\SettingText.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\SettingText.java	Fri Apr 01 00:00:00 2011
@@ -6,4 +6,4 @@
 import java.util.HashMap;
 
-public class SettingText extends Setting
+public class SettingText extends Setting<String>
 {
@@ -58,6 +58,1 @@
     }
-
-    public void set(Object obj, String s)
-    {
-        set((String)obj, s);
-    }
diff -r -U 3 minecraft\net\minecraft\src\BaseMod.java minecraft_patched\net\minecraft\src\BaseMod.java
--- minecraft\net\minecraft\src\BaseMod.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\BaseMod.java	Fri Apr 01 00:00:00 2011
@@ -25,4 +25,4 @@
     }
 
-    public void AddRenderer(Map map)
+    public void AddRenderer(Map<Class<? extends Entity>, Render> map)
     {
diff -r -U 3 minecraft\net\minecraft\src\ModLoader.java minecraft_patched\net\minecraft\src\ModLoader.java
--- minecraft\net\minecraft\src\ModLoader.java	Fri Apr 01 00:00:00 2011
+++ minecraft_patched\net\minecraft\src\ModLoader.java	Fri Apr 01 00:00:00 2011
@@ -102,4 +102,4 @@
     }
 
-    public static void AddAllRenderers(Map map)
+    public static void AddAllRenderers(Map<Class<? extends Entity>, Render> map)
     {
@@ -294,3 +294,3 @@
         logger.finer((new StringBuilder("addOverride(")).append(s).append(",").append(s1).append(",").append(i).append("). ").append(k).append(" left.").toString());
-        Object obj = (Map)overrides.get(Integer.valueOf(j));
+        Map obj = (Map)overrides.get(Integer.valueOf(j));
         if(obj == null)
@@ -317,9 +317,9 @@
     }
 
-    public static void AddSpawn(Class class1, int i, EnumCreatureType enumcreaturetype)
+    public static void AddSpawn(Class<? extends EntityLiving> class1, int i, EnumCreatureType enumcreaturetype)
     {
         AddSpawn(class1, i, enumcreaturetype, null);
     }
 
-    public static void AddSpawn(Class class1, int i, EnumCreatureType enumcreaturetype, BiomeGenBase abiomegenbase[])
+    public static void AddSpawn(Class<? extends EntityLiving> class1, int i, EnumCreatureType enumcreaturetype, BiomeGenBase[] abiomegenbase)
     {
@@ -384,4 +384,4 @@
     }
 
-    public static List getLoadedMods()
+    public static List<BaseMod> getLoadedMods()
     {
@@ -429,11 +429,11 @@
     }
 
-    public static Object getPrivateValue(Class class1, Object obj, int i)
+    public static <T, E> T getPrivateValue(Class<? super E> instanceclass, E instance, int fieldindex)
         throws IllegalArgumentException, SecurityException, NoSuchFieldException
     {
         try
         {
-            Field field = class1.getDeclaredFields()[i];
+            Field f = instanceclass.getDeclaredFields()[fieldindex];
-            field.setAccessible(true);
+            f.setAccessible(true);
-            return field.get(obj);
+            return (T)f.get(instance);
         }
@@ -446,11 +446,11 @@
     }
 
-    public static Object getPrivateValue(Class class1, Object obj, String s)
+    public static <T, E> T getPrivateValue(Class<? super E> instanceclass, E instance, String field)
         throws IllegalArgumentException, SecurityException, NoSuchFieldException
     {
         try
         {
-            Field field = class1.getDeclaredField(s);
+            Field f = instanceclass.getDeclaredField(field);
-            field.setAccessible(true);
+            f.setAccessible(true);
-            return field.get(obj);
+            return (T)f.get(instance);
         }
@@ -753,4 +753,4 @@
     }
 
-    public static boolean isGUIOpen(Class class1)
+    public static boolean isGUIOpen(Class<? extends GuiScreen> class1)
     {
@@ -1134,4 +1134,4 @@
     }
 
-    public static void RegisterBlock(Block block, Class class1)
+    public static void RegisterBlock(Block block, Class<? extends ItemBlock> class1)
     {
@@ -1194,4 +1194,4 @@
     }
 
-    public static void RegisterEntityID(Class class1, String s, int i)
+    public static void RegisterEntityID(Class<? extends Entity> class1, String s, int i)
     {
@@ -1221,4 +1221,4 @@
     public static void RegisterKey(BaseMod basemod, KeyBinding keybinding, boolean flag)
     {
-        Object obj = (Map)keyList.get(basemod);
+        Map obj = (Map)keyList.get(basemod);
         if(obj == null)
@@ -1232,9 +1232,9 @@
     }
 
-    public static void RegisterTileEntity(Class class1, String s)
+    public static void RegisterTileEntity(Class<? extends TileEntity> class1, String s)
     {
         RegisterTileEntity(class1, s, null);
     }
 
-    public static void RegisterTileEntity(Class class1, String s, TileEntitySpecialRenderer tileentityspecialrenderer)
+    public static void RegisterTileEntity(Class<? extends TileEntity> class1, String s, TileEntitySpecialRenderer tileentityspecialrenderer)
     {
@@ -1269,9 +1269,9 @@
     }
 
-    public static void RemoveSpawn(Class class1, EnumCreatureType enumcreaturetype)
+    public static void RemoveSpawn(Class<? extends EntityLiving> class1, EnumCreatureType enumcreaturetype)
     {
         RemoveSpawn(class1, enumcreaturetype, null);
     }
 
-    public static void RemoveSpawn(Class class1, EnumCreatureType enumcreaturetype, BiomeGenBase abiomegenbase[])
+    public static void RemoveSpawn(Class<? extends EntityLiving> class1, EnumCreatureType enumcreaturetype, BiomeGenBase[] abiomegenbase)
     {
@@ -1396,4 +1396,4 @@
     }
 
-    public static void setPrivateValue(Class class1, Object obj, int i, Object obj1)
+    public static <T, E> void setPrivateValue(Class<? super T> class1, T obj, int i, E obj1)
         throws IllegalArgumentException, SecurityException, NoSuchFieldException
@@ -1417,4 +1417,4 @@
     }
 
-    public static void setPrivateValue(Class class1, Object obj, String s, Object obj1)
+    public static <T, E> void setPrivateValue(Class<? super T> class1, T obj, String s, E obj1)
         throws IllegalArgumentException, SecurityException, NoSuchFieldException
@@ -1481,7 +1481,7 @@
-    private static final List animList = new LinkedList();
+    private static final List<TextureFX> animList = new LinkedList();
-    private static final Map blockModels = new HashMap();
+    private static final Map<Integer, BaseMod> blockModels = new HashMap();
-    private static final Map blockSpecialInv = new HashMap();
+    private static final Map<Integer, Boolean> blockSpecialInv = new HashMap();
     private static final File cfgfile = new File(Minecraft.func_6240_b(), "/config/ModLoader.cfg");
     public static Level cfgLoggingLevel;
-    private static Map classMap = null;
+    private static Map<String, Class<? extends Entity>> classMap = null;
     private static long clock = 0L;
@@ -1495,8 +1495,8 @@
	 private static int highestEntityId = 3000;
-    private static final Map inGameHooks = new HashMap();
+    private static final Map<BaseMod, Boolean> inGameHooks = new HashMap();
-    private static final Map inGUIHooks = new HashMap();
+    private static final Map<BaseMod, Boolean> inGUIHooks = new HashMap();
     private static Minecraft instance = null;
     private static int itemSpriteIndex = 0;
     private static int itemSpritesLeft = 0;
-    private static final Map keyList = new HashMap();
+    private static final Map<BaseMod, Map<KeyBinding, boolean[]>> keyList = new HashMap();
     private static final File logfile = new File(Minecraft.func_6240_b(), "ModLoader.txt");
@@ -1507,5 +1507,5 @@
	 private static Method method_RegisterTileEntity = null;
-    private static final LinkedList modList = new LinkedList();
+    private static final LinkedList<BaseMod> modList = new LinkedList();
     private static int nextBlockModelID = 1000;
-    private static final Map overrides = new HashMap();
+    private static final Map<Integer, Map<String, Integer>> overrides = new HashMap();
     public static final Properties props = new Properties();
diff -r -U 3 minecraft\net\minecraft\GameUpdater.java minecraft_patched\net\minecraft\GameUpdater.java
--- minecraft\net\minecraft\GameUpdater.java	Thu May 19 23:08:46 2011
+++ minecraft_patched\net\minecraft\GameUpdater.java	Wed May 18 23:32:51 2011
@@ -367,186 +367,151 @@
         return (Applet)class1.newInstance();
     }
 
-    protected void downloadJars(String s)
-        throws Exception
+    protected void downloadJars(String path)
+    throws Exception
     {
-        File file;
-        Properties properties;
-        int ai[];
-        boolean aflag[];
-        int j;
-        byte abyte0[];
-        int l;
-        file = new File(s, "md5s");
-        properties = new Properties();
-        if(file.exists())
-        {
-            try
-            {
-                FileInputStream fileinputstream = new FileInputStream(file);
-                properties.load(fileinputstream);
-                fileinputstream.close();
-            }
-            catch(Exception exception)
-            {
-                exception.printStackTrace();
-            }
-        }
-        state = 4;
-        ai = new int[urlList.length];
-        aflag = new boolean[urlList.length];
-        for(int i = 0; i < urlList.length; i++)
-        {
-            URLConnection urlconnection = urlList[i].openConnection();
-            urlconnection.setDefaultUseCaches(false);
-            aflag[i] = false;
-            if(urlconnection instanceof HttpURLConnection)
-            {
-                ((HttpURLConnection)urlconnection).setRequestMethod("HEAD");
-                String s1 = (new StringBuilder("\"")).append(properties.getProperty(getFileName(urlList[i]))).append("\"").toString();
-                if(!forceUpdate && s1 != null)
-                {
-                    urlconnection.setRequestProperty("If-None-Match", s1);
-                }
-                int k = ((HttpURLConnection)urlconnection).getResponseCode();
-                if(k / 100 == 3)
-                {
-                    aflag[i] = true;
-                }
-            }
-            ai[i] = urlconnection.getContentLength();
-            totalSizeDownload += ai[i];
-        }
+    	File versionFile = new File(path, "md5s");
+    	Properties md5s = new Properties();
+    	if (versionFile.exists()) {
+    		try {
+    			FileInputStream fis = new FileInputStream(versionFile);
+    			md5s.load(fis);
+    			fis.close();
+    		} catch (Exception e) {
+    			e.printStackTrace();
+    		}
+    	}
+    	state = 4;
+
+    	int[] fileSizes = new int[urlList.length];
+    	boolean[] skip = new boolean[urlList.length];
+
+    	for (int i = 0; i < urlList.length; i++) {
+    		URLConnection urlconnection = urlList[i].openConnection();
+    		urlconnection.setDefaultUseCaches(false);
+    		skip[i] = false;
+    		if ((urlconnection instanceof HttpURLConnection)) {
+    			((HttpURLConnection)urlconnection).setRequestMethod("HEAD");
+
+    			String etagOnDisk = "\"" + md5s.getProperty(getFileName(urlList[i])) + "\"";
+
+    			if ((!forceUpdate) && (etagOnDisk != null)) urlconnection.setRequestProperty("If-None-Match", etagOnDisk);
+
+    			int code = ((HttpURLConnection)urlconnection).getResponseCode();
+    			if (code / 100 == 3) {
+    				skip[i] = true;
+    			}
+    		}
+    		fileSizes[i] = urlconnection.getContentLength();
+    		totalSizeDownload += fileSizes[i];
+    	}
+
+    	int initialPercentage = this.percentage = 10;
+
+    	byte[] buffer = new byte[65536];
+    	for (int i = 0; i < urlList.length; i++) {
+    		if (skip[i]) {
+    			percentage = (initialPercentage + fileSizes[i] * 45 / totalSizeDownload);
+    		}
+    		else
+    		{
+    			try
+    			{
+    				md5s.remove(getFileName(urlList[i]));
+    				md5s.store(new FileOutputStream(versionFile), "md5 hashes for downloaded files");
+    			} catch (Exception e) {
+    				e.printStackTrace();
+    			}
+
+    			int unsuccessfulAttempts = 0;
+    			int maxUnsuccessfulAttempts = 3;
+    			boolean downloadFile = true;
+
+    			while (downloadFile) {
+    				downloadFile = false;
+
+    				URLConnection urlconnection = urlList[i].openConnection();
+
+    				String etag = "";
+
+    				if ((urlconnection instanceof HttpURLConnection)) {
+    					urlconnection.setRequestProperty("Cache-Control", "no-cache");
+
+    					urlconnection.connect();
+
+    					etag = urlconnection.getHeaderField("ETag");
+    					etag = etag.substring(1, etag.length() - 1);
+    				}
+
+    				String currentFile = getFileName(urlList[i]);
+    				InputStream inputstream = getJarInputStream(currentFile, urlconnection);
+    				FileOutputStream fos = new FileOutputStream(path + currentFile);
+
+    				long downloadStartTime = System.currentTimeMillis();
+    				int downloadedAmount = 0;
+    				int fileSize = 0;
+    				String downloadSpeedMessage = "";
+
+    				MessageDigest m = MessageDigest.getInstance("MD5");
+    				int bufferSize;
+    				while ((bufferSize = inputstream.read(buffer, 0, buffer.length)) != -1)
+    				{
+    					fos.write(buffer, 0, bufferSize);
+    					m.update(buffer, 0, bufferSize);
+    					currentSizeDownload += bufferSize;
+    					fileSize += bufferSize;
+    					percentage = (initialPercentage + currentSizeDownload * 45 / totalSizeDownload);
+    					subtaskMessage = ("Retrieving: " + currentFile + " " + currentSizeDownload * 100 / totalSizeDownload + "%");
+
+    					downloadedAmount += bufferSize;
+    					long timeLapse = System.currentTimeMillis() - downloadStartTime;
+
+    					if (timeLapse >= 1000L) {
+    						float downloadSpeed = downloadedAmount / (float)timeLapse;
+    						downloadSpeed = (int)(downloadSpeed * 100.0F) / 100.0F;
+    						downloadSpeedMessage = " @ " + downloadSpeed + " KB/sec";
+    						downloadedAmount = 0;
+    						downloadStartTime += 1000L;
+    					}
+
+    					subtaskMessage += downloadSpeedMessage;
+    				}
+
+    				inputstream.close();
+    				fos.close();
+    				String md5 = new BigInteger(1, m.digest()).toString(16);
+    				while (md5.length() < 32) {
+    					md5 = "0" + md5;
+    				}
+    				boolean md5Matches = true;
+    				if (etag != null) {
+    					md5Matches = md5.equals(etag);
+    				}
+
+    				if ((urlconnection instanceof HttpURLConnection)) {
+    					if ((md5Matches) && ((fileSize == fileSizes[i]) || (fileSizes[i] <= 0)))
+    					{
+    						try {
+    							md5s.setProperty(getFileName(urlList[i]), etag);
+    							md5s.store(new FileOutputStream(versionFile), "md5 hashes for downloaded files");
+    						} catch (Exception e) {
+    							e.printStackTrace();
+    						}
+    					} else {
+    						unsuccessfulAttempts++;
+    						if (unsuccessfulAttempts < maxUnsuccessfulAttempts) {
+    							downloadFile = true;
+    							currentSizeDownload -= fileSize;
+    						} else {
+    							throw new Exception("failed to download " + currentFile);
+    						}
+    					}
+    				}
+    			}
+    		}
+    	}
 
-        j = percentage = 10;
-        abyte0 = new byte[0x10000];
-        l = 0;
-          goto _L1
-_L9:
-        int i1;
-        byte byte0;
-        boolean flag;
-        if(aflag[l])
-        {
-            percentage = j + (ai[l] * 45) / totalSizeDownload;
-            continue; /* Loop/switch isn't completed */
-        }
-        try
-        {
-            properties.remove(getFileName(urlList[l]));
-            properties.store(new FileOutputStream(file), "md5 hashes for downloaded files");
-        }
-        catch(Exception exception1)
-        {
-            exception1.printStackTrace();
-        }
-        i1 = 0;
-        byte0 = 3;
-        flag = true;
-          goto _L2
-_L7:
-        URLConnection urlconnection1;
-        String s2;
-        String s3;
-        InputStream inputstream;
-        FileOutputStream fileoutputstream;
-        long l1;
-        int k1;
-        int i2;
-        String s4;
-        MessageDigest messagedigest;
-        flag = false;
-        urlconnection1 = urlList[l].openConnection();
-        s2 = "";
-        if(urlconnection1 instanceof HttpURLConnection)
-        {
-            urlconnection1.setRequestProperty("Cache-Control", "no-cache");
-            urlconnection1.connect();
-            s2 = urlconnection1.getHeaderField("ETag");
-            s2 = s2.substring(1, s2.length() - 1);
-        }
-        s3 = getFileName(urlList[l]);
-        inputstream = getJarInputStream(s3, urlconnection1);
-        fileoutputstream = new FileOutputStream((new StringBuilder(String.valueOf(s))).append(s3).toString());
-        l1 = System.currentTimeMillis();
-        k1 = 0;
-        i2 = 0;
-        s4 = "";
-        messagedigest = MessageDigest.getInstance("MD5");
-          goto _L3
-_L5:
-        int j1;
-        fileoutputstream.write(abyte0, 0, j1);
-        messagedigest.update(abyte0, 0, j1);
-        currentSizeDownload += j1;
-        i2 += j1;
-        percentage = j + (currentSizeDownload * 45) / totalSizeDownload;
-        subtaskMessage = (new StringBuilder("Retrieving: ")).append(s3).append(" ").append((currentSizeDownload * 100) / totalSizeDownload).append("%").toString();
-        k1 += j1;
-        long l2 = System.currentTimeMillis() - l1;
-        if(l2 >= 1000L)
-        {
-            float f = (float)k1 / (float)l2;
-            f = (float)(int)(f * 100F) / 100F;
-            s4 = (new StringBuilder(" @ ")).append(f).append(" KB/sec").toString();
-            k1 = 0;
-            l1 += 1000L;
-        }
-        this;
-        subtaskMessage;
-        JVM INSTR new #184 <Class StringBuilder>;
-        JVM INSTR dup_x1 ;
-        JVM INSTR swap ;
-        String.valueOf();
-        StringBuilder();
-        s4;
-        append();
-        toString();
-        subtaskMessage;
-_L3:
-        if((j1 = inputstream.read(abyte0, 0, abyte0.length)) != -1) goto _L5; else goto _L4
-_L4:
-        inputstream.close();
-        fileoutputstream.close();
-        String s5;
-        for(s5 = (new BigInteger(1, messagedigest.digest())).toString(16); s5.length() < 32; s5 = (new StringBuilder("0")).append(s5).toString()) { }
-        boolean flag1 = true;
-        if(s2 != null)
-        {
-            flag1 = s5.equals(s2);
-        }
-        if(urlconnection1 instanceof HttpURLConnection)
-        {
-            if(flag1 && (i2 == ai[l] || ai[l] <= 0))
-            {
-                try
-                {
-                    properties.setProperty(getFileName(urlList[l]), s2);
-                    properties.store(new FileOutputStream(file), "md5 hashes for downloaded files");
-                }
-                catch(Exception exception2)
-                {
-                    exception2.printStackTrace();
-                }
-            } else
-            if(++i1 < byte0)
-            {
-                flag = true;
-                currentSizeDownload -= i2;
-            } else
-            {
-                throw new Exception((new StringBuilder("failed to download ")).append(s3).toString());
-            }
-        }
-_L2:
-        if(flag) goto _L7; else goto _L6
-_L6:
-        l++;
-_L1:
-        if(l < urlList.length) goto _L9; else goto _L8
-_L8:
-        subtaskMessage = "";
-        return;
+    	subtaskMessage = "";
     }
 
     protected InputStream getJarInputStream(String s, final URLConnection urlconnection)
@@ -824,43 +789,30 @@
 
     public boolean canPlayOffline()
     {
-        File file;
-        String s = (String)AccessController.doPrivileged(new PrivilegedExceptionAction() {
-
-            public Object run()
-                throws Exception
-            {
-                return (new StringBuilder()).append(Util.getWorkingDirectory()).append(File.separator).append("bin").append(File.separator).toString();
-            }
-
-        }
-);
-        file = new File(s);
-        if(!file.exists())
-        {
-            return false;
-        }
-        file = new File(file, "version");
-        if(!file.exists())
-        {
-            return false;
-        }
-        String s1;
-        if(!file.exists())
-        {
-            break MISSING_BLOCK_LABEL_87;
-        }
-        s1 = readVersionFile(file);
-        if(s1 != null && s1.length() > 0)
-        {
-            return true;
-        }
-        break MISSING_BLOCK_LABEL_87;
-        Exception exception;
-        exception;
-        exception.printStackTrace();
-        return false;
-        return false;
+    	try
+    	{
+    		String path = (String)AccessController.doPrivileged(new PrivilegedExceptionAction() {
+    			public Object run() throws Exception {
+    				return Util.getWorkingDirectory() + File.separator + "bin" + File.separator;
+    			}
+    		});
+    		File dir = new File(path);
+    		if (!dir.exists()) return false;
+
+    		dir = new File(dir, "version");
+    		if (!dir.exists()) return false;
+
+    		if (dir.exists()) {
+    			String version = readVersionFile(dir);
+    			if ((version != null) && (version.length() > 0))
+    				return true;
+    		}
+    	}
+    	catch (Exception e) {
+    		e.printStackTrace();
+    		return false;
+    	}
+    	return false;
     }
 
     public static final int STATE_INIT = 1;
diff -r -U 3 minecraft\net\minecraft\Util.java minecraft_patched\net\minecraft\Util.java
--- minecraft\net\minecraft\Util.java	Thu May 19 23:08:46 2011
+++ minecraft_patched\net\minecraft\Util.java	Wed May 18 23:32:51 2011
@@ -14,51 +14,9 @@
 
 public class Util
 {
-    private static final class OS extends Enum
-    {
-
-        public static OS[] values()
-        {
-            OS aos[];
-            int i;
-            OS aos1[];
-            System.arraycopy(aos = ENUM$VALUES, 0, aos1 = new OS[i = aos.length], 0, i);
-            return aos1;
-        }
-
-        public static OS valueOf(String s)
-        {
-            return (OS)Enum.valueOf(net.minecraft.Util$OS.class, s);
-        }
-
-        public static final OS linux;
-        public static final OS solaris;
-        public static final OS windows;
-        public static final OS macos;
-        public static final OS unknown;
-        private static final OS ENUM$VALUES[];
-
-        static 
-        {
-            linux = new OS("linux", 0);
-            solaris = new OS("solaris", 1);
-            windows = new OS("windows", 2);
-            macos = new OS("macos", 3);
-            unknown = new OS("unknown", 4);
-            ENUM$VALUES = (new OS[] {
-                linux, solaris, windows, macos, unknown
-            });
-        }
-
-        private OS(String s, int i)
-        {
-            super(s, i);
-        }
-    }
-
-
-    public Util()
+    private static enum OS
     {
+        linux, solaris, windows, macos, unknown;
     }
 
     public static File getWorkingDirectory()
@@ -74,7 +32,7 @@
     {
         String s1 = System.getProperty("user.home", ".");
         File file;
-        switch($SWITCH_TABLE$net$minecraft$Util$OS()[getPlatform().ordinal()])
+        switch(getPlatform().ordinal())
         {
         case 1: // '\001'
         case 2: // '\002'
@@ -228,44 +186,5 @@
         }
     }
 
-    static int[] $SWITCH_TABLE$net$minecraft$Util$OS()
-    {
-        $SWITCH_TABLE$net$minecraft$Util$OS;
-        if($SWITCH_TABLE$net$minecraft$Util$OS == null) goto _L2; else goto _L1
-_L1:
-        return;
-_L2:
-        JVM INSTR pop ;
-        int ai[] = new int[OS.values().length];
-        try
-        {
-            ai[OS.linux.ordinal()] = 1;
-        }
-        catch(NoSuchFieldError _ex) { }
-        try
-        {
-            ai[OS.macos.ordinal()] = 4;
-        }
-        catch(NoSuchFieldError _ex) { }
-        try
-        {
-            ai[OS.solaris.ordinal()] = 2;
-        }
-        catch(NoSuchFieldError _ex) { }
-        try
-        {
-            ai[OS.unknown.ordinal()] = 5;
-        }
-        catch(NoSuchFieldError _ex) { }
-        try
-        {
-            ai[OS.windows.ordinal()] = 3;
-        }
-        catch(NoSuchFieldError _ex) { }
-        return $SWITCH_TABLE$net$minecraft$Util$OS = ai;
-    }
-
     private static File workDir = null;
-    private static int $SWITCH_TABLE$net$minecraft$Util$OS[]; /* synthetic field */
-
 }
